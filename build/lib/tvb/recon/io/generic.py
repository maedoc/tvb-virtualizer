# -*- coding: utf-8 -*-

import os
import tempfile
from zipfile import ZipFile

import numpy
from tvb.recon.model.constants import CC_POINT_FILE

try:
    from io import StringIO
except ImportError:  # Py 3
    from io import BytesIO as StringIO


class GenericIO(object):
    point_line_flag = "CC-CRS"

    def read_cc_point(self, file_path, line_flag):
        """
        Read vector values from ponscc.cut.log file generated by FreeSurfer
        """
        cc_point = []
        with open(os.path.expandvars(file_path)) as file_ref:
            for line in file_ref:
                if line.startswith(line_flag):
                    line = line.replace(line_flag, "").strip()
                    cc_point = list(map(float, line.split()))
                    break
        cc_point.append(1)
        return cc_point

    def get_ras_coordinates(self, matrix):
        vector = self.read_cc_point(CC_POINT_FILE, self.point_line_flag)

        a = numpy.array(matrix)
        b = numpy.array(vector)
        ras_vector = a.dot(b)

        return ras_vector[0:3]

    # Save a NumPy array to text in a StringIO object.
    def np_save_strio(self, out_array, fmt):
        string_io = StringIO()
        numpy.savetxt(string_io, out_array, fmt)
        return string_io

    def write_connectivity_zip(self, conn_dir, weigths, tracts, cortical, region_names, centers, areas, orientations):
        tmpdir = tempfile.TemporaryDirectory()

        file_weigths = os.path.join(tmpdir.name, 'weights.txt')
        file_tracts = os.path.join(tmpdir.name, 'tract_lengths.txt')
        file_cortical = os.path.join(tmpdir.name, 'cortical.txt')
        file_centers = os.path.join(tmpdir.name, 'centers.txt')
        file_areas = os.path.join(tmpdir.name, 'areas.txt')
        file_orientations = os.path.join(tmpdir.name, 'average_orientations.txt')

        numpy.savetxt(file_weigths, weigths, fmt='%d')
        numpy.savetxt(file_tracts, tracts, fmt='%.3f')
        numpy.savetxt(file_cortical, cortical, fmt='%d')

        with open(str(file_centers), "w") as f:
            for idx, (val_x, val_y, val_z) in enumerate(centers):
                f.write("%s %.2f %.2f %.2f\n" % (region_names[idx], val_x, val_y, val_z))

        numpy.savetxt(file_areas, areas, fmt='%.2f')
        numpy.savetxt(file_orientations, orientations, fmt='%.2f %.2f %.2f')

        filename = os.path.join(conn_dir, "connectivity.zip")
        with ZipFile(filename, 'w') as zip_file:
            zip_file.write(file_weigths, os.path.basename(file_weigths))
            zip_file.write(file_tracts, os.path.basename(file_tracts))
            zip_file.write(file_cortical, os.path.basename(file_cortical))
            zip_file.write(file_centers, os.path.basename(file_centers))
            zip_file.write(file_areas, os.path.basename(file_areas))
            zip_file.write(file_orientations, os.path.basename(file_orientations))

    def write_dict_to_txt_file(self, lut_dict, out_file):
        with open(out_file, "w") as f:
            for key, val in lut_dict.items():
                f.write("%s %s\n" % (key, val))

    def write_list_to_txt_file(self, list, out_file):
        with open(str(out_file), "w") as f:
            for val in list:
                f.write("%s\n" % val)
